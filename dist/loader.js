var $__TypeError = TypeError,
    $__Object = Object,
    $__toObject = function(value) {
      if (value == null) throw $__TypeError();
      return $__Object(value);
    },
    $__spread = function() {
      var rv = [],
          k = 0;
      for (var i = 0; i < arguments.length; i++) {
        var value = $__toObject(arguments[i]);
        for (var j = 0; j < value.length; j++) {
          rv[k++] = value[j];
        }
      }
      return rv;
    };
(function(global) {
  "use strict";
  var std_Function_call = Function.prototype.call;
  var std_Function_bind = Function.prototype.bind;
  var bind = std_Function_call.bind(std_Function_bind);
  var callFunction = bind(std_Function_call, std_Function_call);
  var std_Object_create = Object.create;
  var std_Object_defineProperty = Object.defineProperty;
  var std_Object_keys = Object.keys;
  var std_Object_preventExtensions = Object.preventExtensions;
  var std_Array_push = Array.prototype.push;
  var std_Array_sort = Array.prototype.sort;
  var std_Set = Set;
  var std_Set_get_size = Object.getOwnPropertyDescriptor(Set.prototype, "size").get;
  var std_Set_has = Set.prototype.has;
  var std_Set_add = Set.prototype.add;
  var std_Set_delete = Set.prototype.delete;
  var std_Set_clear = Set.prototype.clear;
  var std_Set_iterator = Set.prototype["@@iterator"];
  var std_Set_iterator_next = new Set()["@@iterator"]().next;
  var std_Map = Map;
  var std_Map_has = Map.prototype.has;
  var std_Map_get = Map.prototype.get;
  var std_Map_set = Map.prototype.set;
  var std_Map_delete = Map.prototype.delete;
  var std_Map_entries = Map.prototype.entries;
  var std_Map_keys = Map.prototype.keys;
  var std_Map_values = Map.prototype.values;
  var std_Map_iterator_next = new Map().keys().next;
  var std_WeakMap = WeakMap;
  var std_WeakMap_has = WeakMap.prototype.has;
  var std_WeakMap_get = WeakMap.prototype.get;
  var std_WeakMap_set = WeakMap.prototype.set;
  var std_Promise = Promise;
  var std_Promise_all = Promise.all;
  var std_Promise_resolve = Promise.resolve;
  var std_Promise_then = Promise.prototype.then;
  var std_Promise_catch = Promise.prototype. catch;
  var std_TypeError = TypeError;
  function ToBoolean(v) {
    return !!v;
  }
  function ToString(v) {
    return "" + v;
  }
  function IsObject(v) {
    return v !== null && v !== undefined && typeof v !== "boolean" && typeof v !== "number" && typeof v !== "string" && typeof v !== "symbol";
  }
  function IsCallable(v) {
    return typeof v === "function";
  }
  function CreateSet() {
    return new std_Set;
  }
  function CreateMap() {
    return new std_Map;
  }
  function CreateWeakMap() {
    return new std_WeakMap;
  }
  function IteratorToArray(iter, next) {
    var a = [];
    for (var x = callFunction(next, iter); !x.done; x = callFunction(next, iter)) callFunction(std_Array_push, a, x.value);
    return a;
  }
  function SetToArray(set) {
    return IteratorToArray(callFunction(std_Set_iterator, set), std_Set_iterator_next);
  }
  function MapValuesToArray(map) {
    return IteratorToArray(callFunction(std_Map_values, map), std_Map_iterator_next);
  }
  function PromiseOf(value) {
    return callFunction(std_Promise_resolve, std_Promise, value);
  }
  function Assert(condition) {
    if (typeof assert === "function") assert(condition); else if (typeof assertEq === "function") assertEq(condition, true);
    if (condition !== true) throw "assertion failed";
  }
  var moduleInternalDataMap = CreateWeakMap();
  function GetModuleInternalData(module) {
    return callFunction(std_WeakMap_get, moduleInternalDataMap, module);
  }
  function $CreateModule() {
    var module = std_Object_create(null);
    var moduleData = {
      dependencies: undefined,
      evaluated: false
    };
    callFunction(std_WeakMap_set, moduleInternalDataMap, module, moduleData);
    return module;
  }
  function $IsModule(module) {
    return GetModuleInternalData(module) !== undefined;
  }
  function $GetDependencies(module) {
    return GetModuleInternalData(module).dependencies;
  }
  function $SetDependencies(module, deps) {
    GetModuleInternalData(module).dependencies = deps;
  }
  function $HasBeenEvaluated(module) {
    return GetModuleInternalData(module).evaluated;
  }
  var loaderIteratorInternalDataMap = CreateWeakMap();
  function $SetLoaderIteratorPrivate(iter, value) {
    callFunction(std_WeakMap_set, loaderIteratorInternalDataMap, iter, value);
  }
  function $GetLoaderIteratorPrivate(iter) {
    if (!IsObject(iter)) {
      throw std_TypeError("Loader Iterator method called on an incompatible " + typeof iter);
    }
    if (!callFunction(std_WeakMap_has, loaderIteratorInternalDataMap, iter)) {
      throw std_TypeError("Loader Iterator method called on an incompatible object");
    }
    return callFunction(std_WeakMap_get, loaderIteratorInternalDataMap, iter);
  }
  function CreateLoad(name) {
    return {
      status: "loading",
      name: name,
      linkSets: CreateSet(),
      metadata: {},
      address: undefined,
      source: undefined,
      kind: undefined,
      body: undefined,
      execute: undefined,
      exception: undefined,
      module: null,
      then: undefined
    };
  }
  function MakeClosure_LoadFailed(load) {
    return function(exc) {
      Assert(load.status === "loading");
      load.status = "failed";
      load.exception = exc;
      var linkSets = SetToArray(load.linkSets);
      callFunction(std_Array_sort, linkSets, (function(a, b) {
        return b.timestamp - a.timestamp;
      }));
      {
        try {
          throw undefined;
        } catch ($i) {
          $i = 0;
          for (; $i < linkSets.length; $i++) {
            try {
              throw undefined;
            } catch (i) {
              i = $i;
              try {
                LinkSetFailed(linkSets[i], exc);
              } finally {
                $i = i;
              }
            }
          }
        }
      }
      Assert(callFunction(std_Set_get_size, load.linkSets) === 0);
    };
  }
  function RequestLoad(loader, request, referrerName, referrerAddress) {
    var F = MakeClosure_CallNormalize(loader, request, referrerName, referrerAddress);
    var p = new std_Promise(F);
    p = callFunction(std_Promise_then, p, MakeClosure_GetOrCreateLoad(loader));
    return p;
  }
  function MakeClosure_CallNormalize(loader, request, referrerName, referrerAddress) {
    return function(resolve, reject) {
      resolve(loader.normalize(request, referrerName, referrerAddress));
    };
  }
  function MakeClosure_GetOrCreateLoad(loader) {
    return function(name) {
      var loaderData = GetLoaderInternalData(loader);
      name = ToString(name);
      var existingModule = callFunction(std_Map_get, loaderData.modules, name);
      if (existingModule !== undefined) {
        var load = CreateLoad(name);
        load.status = "linked";
        load.module = existingModule;
        return load;
      }
      var load = callFunction(std_Map_get, loaderData.loads, name);
      if (load !== undefined) {
        Assert(load.status === "loading" || load.status === "loaded");
        return load;
      }
      load = CreateLoad(name);
      callFunction(std_Map_set, loaderData.loads, name, load);
      ProceedToLocate(loader, load);
      return load;
    };
  }
  function ProceedToLocate(loader, load) {
    var p = PromiseOf(undefined);
    p = callFunction(std_Promise_then, p, MakeClosure_CallLocate(loader, load));
    return ProceedToFetch(loader, load, p);
  }
  function ProceedToFetch(loader, load, p) {
    p = callFunction(std_Promise_then, p, MakeClosure_CallFetch(loader, load));
    return ProceedToTranslate(loader, load, p);
  }
  function ProceedToTranslate(loader, load, p) {
    p = callFunction(std_Promise_then, p, MakeClosure_CallTranslate(loader, load));
    p = callFunction(std_Promise_then, p, MakeClosure_CallInstantiate(loader, load));
    p = callFunction(std_Promise_then, p, MakeClosure_InstantiateSucceeded(loader, load));
    callFunction(std_Promise_catch, p, MakeClosure_LoadFailed(load));
  }
  function MakeClosure_CallLocate(loader, load) {
    return function(_) {
      return loader.locate({
        name: load.name,
        metadata: load.metadata
      });
    };
  }
  function MakeClosure_CallFetch(loader, load) {
    return function(address) {
      if (callFunction(std_Set_get_size, load.linkSets) === 0) return;
      load.address = address;
      return loader.fetch({
        name: load.name,
        metadata: load.metadata,
        address: address
      });
    };
  }
  function MakeClosure_CallTranslate(loader, load) {
    return function(source) {
      if (callFunction(std_Set_get_size, load.linkSets) === 0) return;
      return loader.translate({
        name: load.name,
        metadata: load.metadata,
        address: load.address,
        source: source
      });
    };
  }
  function MakeClosure_CallInstantiate(loader, load) {
    return function(source) {
      if (callFunction(std_Set_get_size, load.linkSets) === 0) return;
      load.source = source;
      return loader.instantiate({
        name: load.name,
        metadata: load.metadata,
        address: load.address,
        source: source
      });
    };
  }
  function MakeClosure_InstantiateSucceeded(loader, load) {
    return function(instantiateResult) {
      if (callFunction(std_Set_get_size, load.linkSets) === 0) return;
      var depsList;
      if (instantiateResult === undefined) {
        try {
          throw undefined;
        } catch (body) {
          body = $ParseModule(loader, load.source, load.name, load.address);
          load.body = body;
          load.kind = "declarative";
          depsList = $ModuleRequests(body);
        }
      } else if (IsObject(instantiateResult)) {
        var deps = instantiateResult.deps;
        depsList = deps === undefined ? []: $__spread(deps);
        var execute = instantiateResult.execute;
        load.execute = execute;
        load.kind = "dynamic";
      } else {
        throw std_TypeError("instantiate hook must return an object or undefined");
      }
      ;
      ;
      return ProcessLoadDependencies(load, loader, depsList);
    };
  }
  function ProcessLoadDependencies(load, loader, depsList) {
    var referrerName = load.name;
    load.dependencies = CreateMap();
    var loadPromises = [];
    for (var i = 0; i < depsList.length; i++) {
      var request = depsList[i];
      var p = RequestLoad(loader, request, referrerName, load.address);
      p = callFunction(std_Promise_then, p, MakeClosure_AddDependencyLoad(load, request));
      callFunction(std_Array_push, loadPromises, p);
    }
    var p = callFunction(std_Promise_all, std_Promise, loadPromises);
    p = callFunction(std_Promise_then, p, MakeClosure_LoadSucceeded(load));
    return p;
  }
  function MakeClosure_AddDependencyLoad(parentLoad, request) {
    return function(depLoad) {
      Assert(!callFunction(std_Map_has, parentLoad.dependencies, request));
      callFunction(std_Map_set, parentLoad.dependencies, request, depLoad.name);
      if (depLoad.status !== "linked") {
        var linkSets = SetToArray(parentLoad.linkSets);
        {
          try {
            throw undefined;
          } catch ($j) {
            $j = 0;
            for (; $j < linkSets.length; $j++) {
              try {
                throw undefined;
              } catch (j) {
                j = $j;
                try {
                  AddLoadToLinkSet(linkSets[j], depLoad);
                } finally {
                  $j = j;
                }
              }
            }
          }
        }
      }
    };
  }
  function MakeClosure_LoadSucceeded(load) {
    return function(_) {
      Assert(load.status === "loading");
      load.status = "loaded";
      var linkSets = SetToArray(load.linkSets);
      callFunction(std_Array_sort, linkSets, (function(a, b) {
        return b.timestamp - a.timestamp;
      }));
      {
        try {
          throw undefined;
        } catch ($i) {
          $i = 0;
          for (; $i < linkSets.length; $i++) {
            try {
              throw undefined;
            } catch (i) {
              i = $i;
              try {
                UpdateLinkSetOnLoad(linkSets[i], load);
              } finally {
                $i = i;
              }
            }
          }
        }
      }
    };
  }
  function CreateLinkSet(loader, startingLoad) {
    var loaderData = GetLoaderInternalData(loader);
    var resolve,
        reject;
    var done = new std_Promise(function(res, rej) {
      resolve = res;
      reject = rej;
    });
    var linkSet = {
      loader: loader,
      loads: CreateSet(),
      done: done,
      resolve: resolve,
      reject: reject,
      timestamp: loaderData.linkSetCounter++,
      loadingCount: 0
    };
    AddLoadToLinkSet(linkSet, startingLoad);
    return linkSet;
  }
  function AddLoadToLinkSet(linkSet, load) {
    Assert(load.status === "loading" || load.status === "loaded");
    var loaderData = GetLoaderInternalData(linkSet.loader);
    if (!callFunction(std_Set_has, linkSet.loads, load)) {
      callFunction(std_Set_add, linkSet.loads, load);
      callFunction(std_Set_add, load.linkSets, linkSet);
      if (load.status === "loaded") {
        try {
          throw undefined;
        } catch (names) {
          names = MapValuesToArray(load.dependencies);
          {
            try {
              throw undefined;
            } catch ($i) {
              $i = 0;
              for (; $i < names.length; $i++) {
                try {
                  throw undefined;
                } catch (i) {
                  i = $i;
                  try {
                    try {
                      throw undefined;
                    } catch (name) {
                      name = names[i];
                      if (!callFunction(std_Map_has, loaderData.modules, name)) {
                        try {
                          throw undefined;
                        } catch (depLoad) {
                          depLoad = callFunction(std_Map_get, loaderData.loads, name);
                          if (depLoad !== undefined) AddLoadToLinkSet(linkSet, depLoad);
                        }
                      }
                    }
                  } finally {
                    $i = i;
                  }
                }
              }
            }
          }
        }
      } else {
        linkSet.loadingCount++;
      }
    }
  }
  function UpdateLinkSetOnLoad(linkSet, load) {
    Assert(callFunction(std_Set_has, linkSet.loads, load));
    Assert(load.status === "loaded" || load.status === "linked");
    if (--linkSet.loadingCount !== 0) return;
    var startingLoad = callFunction(std_Set_iterator_next, callFunction(std_Set_iterator, linkSet.loads)).value;
    try {
      Link(linkSet.loads, linkSet.loader);
    } catch (exc) {
      LinkSetFailed(linkSet, exc);
      return;
    }
    Assert(callFunction(std_Set_get_size, linkSet.loads) === 0);
    linkSet.resolve(startingLoad);
  }
  function LinkSetFailed(linkSet, exc) {
    var loaderData = GetLoaderInternalData(linkSet.loader);
    var loads = SetToArray(linkSet.loads);
    for (var i = 0; i < loads.length; i++) {
      var load = loads[i];
      Assert(callFunction(std_Set_has, load.linkSets, linkSet));
      callFunction(std_Set_delete, load.linkSets, linkSet);
      if (callFunction(std_Set_get_size, load.linkSets) === 0) {
        try {
          throw undefined;
        } catch (name) {
          name = load.name;
          if (name !== undefined) {
            try {
              throw undefined;
            } catch (currentLoad) {
              currentLoad = callFunction(std_Map_get, loaderData.loads, name);
              if (currentLoad === load) {
                callFunction(std_Map_delete, loaderData.loads, name);
              }
            }
          }
        }
      }
    }
    return linkSet.reject(exc);
  }
  function FinishLoad(loader, load) {
    var loaderData = GetLoaderInternalData(loader);
    var name = load.name;
    if (name !== undefined) {
      Assert(!callFunction(std_Map_has, loaderData.modules, name));
      callFunction(std_Map_set, loaderData.modules, name, load.module);
    }
    var name = load.name;
    if (name !== undefined) {
      try {
        throw undefined;
      } catch (currentLoad) {
        currentLoad = callFunction(std_Map_get, loaderData.loads, name);
        if (currentLoad === load) {
          callFunction(std_Map_delete, loaderData.loads, name);
        }
      }
    }
    var linkSets = SetToArray(load.linkSets);
    for (var i = 0; i < linkSets.length; i++) {
      callFunction(std_Set_delete, linkSets[i].loads, load);
    }
    callFunction(std_Set_clear, load.linkSets);
  }
  function LoadModule(loader, name, options) {
    var loaderData = GetLoaderInternalData(loader);
    name = ToString(name);
    var address = GetOption(options, "address");
    var F = MakeClosure_AsyncStartLoadPartwayThrough(loader, loaderData, name, address === undefined ? "locate": "fetch", {}, address, undefined);
    return new std_Promise(F);
  }
  function MakeClosure_AsyncStartLoadPartwayThrough(loader, loaderData, name, step, metadata, address, source) {
    return function(resolve, reject) {
      if (callFunction(std_Map_has, loaderData.modules, name)) {
        throw std_TypeError("can't define module \"" + name + "\": already loaded");
      }
      if (callFunction(std_Map_has, loaderData.loads, name)) {
        throw std_TypeError("can't define module \"" + name + "\": already loading");
      }
      var load = CreateLoad(name);
      load.metadata = metadata;
      var linkSet = CreateLinkSet(loader, load);
      callFunction(std_Map_set, loaderData.loads, name, load);
      resolve(linkSet.done);
      if (step == "locate") {
        ProceedToLocate(loader, load);
      } else if (step == "fetch") {
        ProceedToFetch(loader, load, PromiseOf(address));
      } else {
        $Assert(step == "translate");
        load.address = address;
        var sourcePromise = PromiseOf(source);
        ProceedToTranslate(loader, load, sourcePromise);
      }
    };
  }
  function MakeClosure_EvaluateLoadedModule(loader) {
    return function(load) {
      Assert(load.status === "linked");
      var module = load.module;
      EnsureEvaluatedHelper(module, loader);
      return module;
    };
  }
  function Link(loads, loader) {
    loads = SetToArray(loads);
    for (var i = 0; i < loads.length; i++) {
      if (loads[i].kind !== "dynamic") throw new InternalError("Module linking is not implemented.");
    }
    LinkDynamicModules(loads, loader);
  }
  function LinkDynamicModules(loads, loader) {
    for (var i = 0; i < loads.length; i++) {
      var load = loads[i];
      var mod = callFunction(load.execute, undefined);
      if (!$IsModule(mod)) throw std_TypeError("factory.execute callback must return a Module object");
      load.module = mod;
      load.status = "linked";
      FinishLoad(loader, load);
    }
  }
  function EnsureEvaluated(mod, seen, loaderData) {
    callFunction(std_Set_add, seen, mod);
    var deps = $GetDependencies(mod);
    if (deps === undefined) return;
    {
      try {
        throw undefined;
      } catch ($i) {
        $i = 0;
        for (; $i < deps.length; $i++) {
          try {
            throw undefined;
          } catch (i) {
            i = $i;
            try {
              try {
                throw undefined;
              } catch (dep) {
                dep = deps[i];
                if (!callFunction(std_Set_has, seen, dep)) {
                  EnsureEvaluated(dep, seen, loaderData);
                }
              }
            } finally {
              $i = i;
            }
          }
        }
      }
    }
    if (!$HasBeenEvaluated(mod)) {
      $EvaluateModuleBody(loaderData.realm, mod);
    }
  }
  function EnsureEvaluatedHelper(mod, loader) {
    var seen = CreateSet();
    var loaderData = GetLoaderInternalData(loader);
    EnsureEvaluated(mod, seen, loaderData);
    seen = SetToArray(seen);
    {
      try {
        throw undefined;
      } catch ($i) {
        $i = 0;
        for (; $i < seen.length; $i++) {
          try {
            throw undefined;
          } catch (i) {
            i = $i;
            try {
              $SetDependencies(seen[i], undefined);
            } finally {
              $i = i;
            }
          }
        }
      }
    }
  }
  function CreateConstantGetter(key, value) {
    var getter = function() {
      return value;
    };
    return getter;
  }
  function Module(obj) {
    if (!IsObject(obj)) throw std_TypeError("Module argument must be an object");
    var mod = $CreateModule();
    var keys = std_Object_keys(obj);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = obj[key];
      std_Object_defineProperty(mod, key, {
        configurable: false,
        enumerable: true,
        get: CreateConstantGetter(key, value),
        set: undefined
      });
    }
    std_Object_preventExtensions(mod);
    return mod;
  }
  Module.prototype = null;
  var realmInternalDataMap = CreateWeakMap();
  function GetRealmInternalData(value) {
    if (typeof value !== "object") throw std_TypeError("Realm method or accessor called on incompatible primitive");
    var realmData = callFunction(std_WeakMap_get, realmInternalDataMap, value);
    if (realmData === undefined) throw std_TypeError("Realm method or accessor called on incompatible object");
    return realmData;
  }
  function Realm(options, initializer) {
    var realmObject = callFunction(Realm["@@create"], Realm);
    if (!IsObject(realmObject)) throw std_TypeError("Realm object expected");
    var realmData = callFunction(std_WeakMap_get, realmInternalDataMap, realmObject);
    if (realmData.realm !== undefined) throw std_TypeError("Realm object cannot be intitialized more than once");
    if (options === undefined) options = std_Object_create(null);
    if (!IsObject(options)) throw std_TypeError("options must be an object or undefined");
    var realm = $CreateRealm(realmObject);
    var evalHooks = UnpackOption(options, "eval", (function() {
      return ({});
    }));
    if (!IsObject(evalHooks)) throw std_TypeError("options.eval must be an object or undefined");
    var directEval = UnpackOption(evalHooks, "direct", (function() {
      return ({});
    }));
    if (!IsObject(directEval)) throw std_TypeError("options.eval.direct must be an object or undefined");
    var translate = UnpackOption(directEval, "translate");
    if (translate !== undefined && !IsCallable(translate)) throw std_TypeError("translate hook is not callable");
    realm.translateDirectEvalHook = translate;
    var fallback = UnpackOption(directEval, "fallback");
    if (fallback !== undefined && !IsCallable(fallback)) throw std_TypeError("fallback hook is not callable");
    realm.fallbackDirectEvalHook = fallback;
    var indirectEval = UnpackOption(evalHooks, "indirect");
    if (indirectEval !== undefined && !IsCallable(indirectEval)) throw std_TypeError("indirect eval hook is not callable");
    realm.indirectEvalHook = indirectEval;
    var Function = UnpackOption(options, "Function");
    if (Function !== undefined && !IsCallable(Function)) throw std_TypeError("Function hook is not callable");
    realm.FunctionHook = Function;
    realmData.realm = realm;
    if (initializer !== undefined) {
      if (!IsCallable(initializer)) throw std_TypeError("initializer is not callable");
      callFunction(initializer, realmObject, realm.builtins);
    }
    return realmObject;
  }
  def(Realm.prototype, {
    get global() {
      var realmData = GetRealmInternalData(this);
      return realmData.realm.globalThis;
    },
    eval: function(source) {
      var realmData = GetRealmInternalData(this);
      return $IndirectEval(realmData.realm, source);
    }
  });
  var Realm_create = function create() {
    var realmObject = std_Object_create(this.prototype);
    var realmData = {realm: undefined};
    callFunction(std_WeakMap_set, realmInternalDataMap, realmObject, realmData);
    return realmObject;
  };
  def(Realm, {"@@create": Realm_create});
  var loaderInternalDataMap = CreateWeakMap();
  function GetLoaderInternalData(value) {
    if (typeof value !== "object") throw std_TypeError("Loader method called on incompatible primitive");
    var loaderData = callFunction(std_WeakMap_get, loaderInternalDataMap, value);
    if (loaderData === undefined) throw std_TypeError("Loader method called on incompatible object");
    return loaderData;
  }
  function GetOption(options, name) {
    if (options === undefined) return undefined;
    if (!IsObject(options)) throw std_TypeError("options must be either an object or undefined");
    return options[name];
  }
  function Loader() {
    var options = arguments[0] !== (void 0) ? arguments[0]: {};
    var loader = callFunction(Loader["@@create"], Loader);
    if (!IsObject(loader)) throw std_TypeError("Loader object expected");
    var loaderData = callFunction(std_WeakMap_get, loaderInternalDataMap, loader);
    if (loaderData === undefined) throw std_TypeError("Loader object expected");
    if (loaderData.modules !== undefined) throw std_TypeError("Loader object cannot be intitialized more than once");
    if (!IsObject(options)) throw std_TypeError("options must be an object or undefined");
    var realmObject = options.realm;
    var realm;
    if (realmObject === undefined) {
      realm = undefined;
    } else if (IsObject(realmObject) && callFunction(std_WeakMap_has, realmInternalDataMap, realmObject)) {
      realm = GetRealmInternalData(realmObject).realm;
    } else {
      throw std_TypeError("options.realm is not a Realm object");
    }
    var hooks = ["normalize", "locate", "fetch", "translate", "instantiate"];
    {
      try {
        throw undefined;
      } catch ($i) {
        $i = 0;
        for (; $i < hooks.length; $i++) {
          try {
            throw undefined;
          } catch (i) {
            i = $i;
            try {
              try {
                throw undefined;
              } catch (name) {
                name = hooks[i];
                var hook = options[name];
                if (hook !== undefined) {
                  std_Object_defineProperty(loader, name, {
                    configurable: true,
                    enumerable: true,
                    value: hook,
                    writable: true
                  });
                }
              }
            } finally {
              $i = i;
            }
          }
        }
      }
    }
    loaderData.modules = CreateMap();
    loaderData.loads = CreateMap();
    loaderData.realm = realm;
    return loader;
  }
  function def(obj, props) {
    var names = Object.getOwnPropertyNames(props);
    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      var desc = Object.getOwnPropertyDescriptor(props, name);
      desc.enumerable = false;
      Object.defineProperty(obj, name, desc);
    }
  }
  def(global, {
    Module: Module,
    Loader: Loader
  });
  var Loader_create = function create() {
    var loader = std_Object_create(this.prototype);
    var loaderData = {
      modules: undefined,
      loads: undefined,
      realm: undefined,
      linkSetCounter: 0
    };
    callFunction(std_WeakMap_set, loaderInternalDataMap, loader, loaderData);
    return loader;
  };
  def(Loader, {"@@create": Loader_create});
  function UnpackOption(options, name, thunk) {
    var value;
    return (options === undefined || ((value = options[name]) === undefined)) ? (thunk ? thunk(): undefined): value;
  }
  def(Loader.prototype, {
    get realm() {
      if (!IsObject(this) || !callFunction(std_WeakMap_has, loaderInternalDataMap, this)) {
        throw std_TypeError("not a Loader object");
      }
      return GetLoaderInternalData(this).realm.realmObject;
    },
    get global() {
      if (!IsObject(this) || !callFunction(std_WeakMap_has, loaderInternalDataMap, this)) {
        throw std_TypeError("not a Loader object");
      }
      return GetLoaderInternalData(this).realm.globalThis;
    },
    define: function define(name, source) {
      var options = arguments[2];
      var loader = this;
      var loaderData = GetLoaderInternalData(this);
      name = ToString(name);
      var address = GetOption(options, "address");
      var metadata = GetOption(options, "metadata");
      if (metadata === undefined) metadata = {};
      var f = MakeClosure_AsyncStartLoadPartwayThrough(loader, loaderData, name, "translate", metadata, address, source);
      var p = new std_Promise(f);
      p = callFunction(std_Promise_then, p, function(_) {});
      return p;
    },
    load: function load(name) {
      var options = arguments[1];
      var p = LoadModule(this, name, options);
      p = callFunction(std_Promise_then, p, function(_) {});
      return p;
    },
    module: function module (source) {
      var options = arguments[1];
      var loader = this;
      GetLoaderInternalData(this);
      var address = GetOption(options, "address");
      var load = CreateLoad(undefined);
      load.address = address;
      var linkSet = CreateLinkSet(loader, load);
      var p = callFunction(std_Promise_then, linkSet.done, MakeClosure_EvaluateLoadedModule(loader));
      var sourcePromise = PromiseOf(source);
      ProceedToTranslate(loader, load, sourcePromise);
      return p;
    },
    import: function import_(name) {
      var options = arguments[1];
      var loader = this;
      var p = LoadModule(loader, name, options);
      p = callFunction(std_Promise_then, p, MakeClosure_EvaluateLoadedModule(loader));
      return p;
    },
    eval: function(source) {
      var loaderData = GetLoaderInternalData(this);
      return $IndirectEval(loaderData.realm, source);
    },
    get: function get(name) {
      var loaderData = GetLoaderInternalData(this);
      name = ToString(name);
      var m = callFunction(std_Map_get, loaderData.modules, name);
      if (m !== undefined) EnsureEvaluatedHelper(m, this);
      return m;
    },
    has: function has(name) {
      var loaderData = GetLoaderInternalData(this);
      name = ToString(name);
      return callFunction(std_Map_has, loaderData.modules, name);
    },
    set: function set(name, module) {
      var loaderData = GetLoaderInternalData(this);
      name = ToString(name);
      if (!$IsModule(module)) throw std_TypeError("Module object required");
      callFunction(std_Map_set, loaderData.modules, name, module);
      return this;
    },
    delete: function delete_(name) {
      var loaderData = GetLoaderInternalData(this);
      name = ToString(name);
      return callFunction(std_Map_delete, loaderData.modules, name);
    },
    entries: function entries() {
      var loaderData = GetLoaderInternalData(this);
      return new LoaderIterator(callFunction(std_Map_entries, loaderData.modules));
    },
    keys: function keys() {
      var loaderData = GetLoaderInternalData(this);
      return new LoaderIterator(callFunction(std_Map_keys, loaderData.modules));
    },
    values: function values() {
      var loaderData = GetLoaderInternalData(this);
      return new LoaderIterator(callFunction(std_Map_values, loaderData.modules));
    },
    normalize: function normalize(name, referrerName, referrerAddress) {
      return name;
    },
    locate: function locate(load) {
      return load.name;
    },
    fetch: function fetch(load) {
      throw std_TypeError("Loader.prototype.fetch was called");
    },
    translate: function translate(load) {
      return load.source;
    },
    instantiate: function instantiate(load) {}
  });
  def(Loader.prototype, {"@@iterator": Loader.prototype.entries});
  function LoaderIterator(iterator) {
    $SetLoaderIteratorPrivate(this, iterator);
  }
  LoaderIterator.prototype = {
    next: function next() {
      return callFunction(std_Map_iterator_next, $GetLoaderIteratorPrivate(this));
    },
    "@@iterator": function() {
      return this;
    },
    "@@toStringTag": "Loader Iterator"
  };
})(this);

//@ sourceMappingURL=data:application/json;base64,
function YLoader() {}

//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3lsb2FkZXIuanMuZXM2Iiwic291cmNlcyI6WyJsaWIveWxvYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxRQUFTLFFBQUEsQ0FBUyxDQUFFLEVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB5bG9hZGVyIHNob3VsZCBjdXN0b21pemUgc3lzdGVtIGxvYWRlclxuXG5mdW5jdGlvbiBZTG9hZGVyICgpIHt9XG4iXX0=